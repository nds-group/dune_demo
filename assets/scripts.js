window.Apex = {
  chart: {
    foreColor: '#fff',
    toolbar: {
      show: false
    },
  },
  colors: ['#FCCF31', '#17ead9', '#f02fc2'],
  stroke: {
    width: 3
  },
  dataLabels: {
    enabled: false
  },
  grid: {
    borderColor: "#40475D",
  },
  xaxis: {
    axisTicks: {
      color: '#333'
    },
    axisBorder: {
      color: "#333"
    }
  },
  fill: {
    type: 'gradient',
    gradient: {
      gradientToColors: ['#F55555', '#6078ea', '#6094ea']
    },
  },
  tooltip: {
    theme: 'dark',
    x: {
      formatter: function (val) {
        return moment(new Date(val)).format("HH:mm:ss")
      }
    }
  },
  yaxis: {
    decimalsInFloat: 2,
    opposite: true,
    labels: {
      offsetX: -10
    }
  }
};

// MACRO F1 

var optionsLine = {
  chart: {
    height: 350,
    type: 'line',
    stacked: false,
    animations: {
      enabled: true,
      easing: 'linear',
      dynamicAnimation: {
        speed: 1000
      }
    },
    dropShadow: {
      enabled: true,
      opacity: 0.6,
      blur: 5,
      left: -7,
      top: 22
    },
    toolbar: {
      show: false
    },
    zoom: {
      enabled: false
    }
  },
  dataLabels: {
    enabled: false
  },
  stroke: {
    curve: 'straight',
    width: [1, 5, 1, 5, 1, 5] // 'Overall' is 5px, 'Instantaneous' is 1px
  },
  grid: {
    padding: {
      left: 0,
      right: 0
    }
  },
  markers: {
    size: 0,
    hover: {
      size: 0
    }
  },
  series: [{
    name: 'Dune_Instantaneous',
    color: '#e1eacd',
    yAxisIndex: 0,
    data: []
  }, {
    name: 'Dune_Overall',
    color: '#0b8457',
    yAxisIndex: 0,
    data: []
  }, {
    name: 'Jewel_Instantaneous',
    color: '#e1eacd',
    yAxisIndex: 0,
    data: []
  }, {
    name: 'Jewel_Overall',
    color: '#0b8457',
    yAxisIndex: 0,
    data: []
  }, {
    name: 'Mousika_Instantaneous',
    color: '#e1eacd',
    yAxisIndex: 0,
    data: []
  }, {
    name: 'Mousika_Overall',
    color: '#0b8457',
    yAxisIndex: 0,
    data: []
  }
  ],
  xaxis: {
    type: 'datetime',
    range: 10 * 60 * 1000 // 10 minutes in milliseconds
  },
  title: {
    text: 'Macro F1-Score',
    align: 'center',
    style: {
      fontSize: '18px'
    }
  },
  subtitle: {
    floating: true,
    align: 'right',
    offsetY: 0,
    style: {
      fontSize: '22px'
    }
  },
  legend: {
    show: true,
    floating: true,
    horizontalAlign: 'left',
    position: 'top',
    offsetY: -28,
    offsetX: -5,
    customLegendItems: ['Overall', 'Instantaneous'],
    markers: {
      fillColors: ['#0b8457', '#e1eacd'] // Match your 'Overall' and 'Instantaneous' colors
    }
  },
  yaxis: {
    min: 0,
    max: 1
  },
  fill: {
    type: 'solid'
  },
}

var chartLine = new ApexCharts(
  document.querySelector("#linechart"),
  optionsLine
);
chartLine.render()

// PERFORMANCE


var optionsCombinedPerf = {
  chart: {
    type: 'bar',
    height: 347,
    stacked: false,
  },
  plotOptions: {
    bar: {
      horizontal: true,
      barHeight: '75%',
      dataLabels: {
        position: 'right'
      }
    }
  },
  colors: ['#0b8457', '#10316b', '#eac100'], // Macro, Weighted, Micro
  series: [
    {
      name: 'Macro F1 Score',
      data: [null, null, null, null] // No Inf, Mousika, Jewel, Dune
    },
    {
      name: 'Weighted F1 Score',
      data: [null, null, null, null]
    },
    {
      name: 'Micro F1 Score',
      data: [null, null, null, null]
    }
  ],
  xaxis: {
    min: 0,
    max: 1,
    categories: ['No Inference', 'Mousika', 'Jewel', 'Dune'],
    title: {
      text: 'Score',
      style: {
        color: '#ccc'
      }
    },
    labels: {
      enabled: false
    }
  },
  yaxis: {
    labels: {
      style: {
        color: '#fff',
        fontWeight: 600,
        fontSize: '16px'
      }
    }
  },
  dataLabels: {
    enabled: true,
    style: {
      fontSize: '13px',
      colors: ['#fff']
    },
    formatter: (val) => (val == null ? '' : val.toFixed(3)),
  },
  tooltip: {
    enabled: true,
    // shared: true
  },
  legend: {
    show: true,
    position: 'bottom',
    offsetY: 10,
    labels: {
      colors: ['#ccc']
    },
    markers: {
      shape: 'circle'
    }
  },
  grid: {
    show: false
  },
  fill: {
    type: 'solid'
  }
};

var chartCombinedPerf = new ApexCharts(document.querySelector("#combinedPerformance"), optionsCombinedPerf);
chartCombinedPerf.render();



var optionsnoInference = {
  chart: {
    height: 70,
    type: 'bar',
    stacked: true,
    sparkline: {
      enabled: true
    },
  },
  plotOptions: {
    bar: {
      horizontal: true,
      barHeight: '40%',
      colors: {
        backgroundBarColors: ['#40475D']
      }
    },
  },
  stroke: {
    width: 0,
  },
  series: [{
    name: 'No Inference',
    data: [0]
  }],
  title: {
    floating: true,
    offsetX: -10,
    offsetY: 5,
    text: 'No Inference'
  },
  subtitle: {
    floating: true,
    align: 'right',
    offsetY: 0,
    style: {
      fontSize: '20px'
    }
  },
  tooltip: {
    enabled: false
  },
  xaxis: {
    categories: ['No Inference'],
  },
  yaxis: {
    max: 1200
  },
  fill: {
    type: 'solid',
    colors: ['#a21232']
  }
}

var chartnoInference = new ApexCharts(document.querySelector('#noInference'), optionsnoInference);
chartnoInference.render();


var optionsMousika = {
  chart: {
    height: 70,
    type: 'bar',
    stacked: true,
    sparkline: {
      enabled: true
    }
  },
  plotOptions: {
    bar: {
      horizontal: true,
      barHeight: '40%',
      colors: {
        backgroundBarColors: ['#40475D']
      }
    },
  },
  colors: ['#17ead9'],
  stroke: {
    width: 0,
  },
  series: [{
    name: 'Mousika',
    data: [0]
  }],
  title: {
    floating: true,
    offsetX: -10,
    offsetY: 5,
    text: 'Mousika'
  },
  subtitle: {
    floating: true,
    align: 'right',
    offsetY: 0,
    style: {
      fontSize: '20px'
    }
  },
  tooltip: {
    enabled: false
  },
  xaxis: {
    categories: ['Mousika'],
  },
  yaxis: {
    max: 1200
  },
  fill: {
    type: 'solid',
    colors: ['#a21232']
  }
}

var chartMousika = new ApexCharts(document.querySelector('#Mousika'), optionsMousika);
chartMousika.render();


var optionsJewel = {
  chart: {
    height: 70,
    type: 'bar',
    stacked: true,
    sparkline: {
      enabled: true
    }
  },
  plotOptions: {
    bar: {
      horizontal: true,
      barHeight: '40%',
      colors: {
        backgroundBarColors: ['#40475D']
      }
    },
  },
  colors: ['#f02fc2'],
  stroke: {
    width: 0,
  },
  series: [{
    name: 'Jewel',
    data: [0]
  }],
  fill: {
    type: 'solid',
    colors: ['#a21232']
  },
  title: {
    floating: true,
    offsetX: -10,
    offsetY: 5,
    text: 'Jewel'
  },
  subtitle: {
    floating: true,
    align: 'right',
    offsetY: 0,
    style: {
      fontSize: '20px'
    }
  },
  tooltip: {
    enabled: false,
  },
  xaxis: {
    categories: ['Jewel'],
  },
  yaxis: {
    max: 1200
  },
}

var chartJewel = new ApexCharts(document.querySelector('#Jewel'), optionsJewel);
chartJewel.render();

var optionsDune = {
  chart: {
    height: 80,
    type: 'bar',
    stacked: true,
    sparkline: {
      enabled: true
    }
  },
  plotOptions: {
    bar: {
      horizontal: true,
      barHeight: '40%',
      colors: {
        backgroundBarColors: ['#40475D']
      }
    },
  },
  colors: ['#f02fc2'],
  stroke: {
    width: 0,
  },
  series: [{
    name: 'Dune',
    data: [0]
  }],
  fill: {
    type: 'solid',
    colors: ['#a21232']
  },
  title: {
    floating: true,
    offsetX: -10,
    offsetY: 5,
    text: 'Dune'
  },
  subtitle: {
    floating: true,
    align: 'right',
    offsetY: 0,
    style: {
      fontSize: '20px'
    }
  },
  tooltip: {
    enabled: false
  },
  xaxis: {
    categories: ['Dune'],
  },
  yaxis: {
    max: 1200
  }
}

var chartDune = new ApexCharts(document.querySelector('#Dune'), optionsDune);
chartDune.render();

window.setInterval(function () {
  const now = new Date().getTime();

  chartLine.updateOptions({
    xaxis: {
      min: now - (10 * 60 * 1000), // 15 min ago
      max: now
    }
  }, false, false);


  console.log("Script loaded");
  
  if (typeof window.currentUpdater === 'undefined') {
    console.log("Initializing currentUpdater");
    window.currentUpdater = null;
    window.intervalId = null;

    // TODO: Update this part and get data from .json file
    window.duneLatencyData = [1137.73, 1137.68, 1137.72, 1137.69, 1137.73, 1137.72, 1137.69, 1137.7, 1137.7, 1137.69, 1137.71, 1137.7, 1137.73, 1137.73, 1137.7, 1137.71, 1137.7, 1137.7, 1137.68, 1137.73, 1137.67, 1137.71, 1137.71, 1137.7, 1137.72, 1137.72, 1137.69, 1137.7, 1137.72, 1137.71, 1137.72, 1137.72, 1137.69, 1137.7, 1137.68, 1137.72, 1137.67, 1137.73, 1137.7, 1137.68, 1137.67, 1137.7, 1137.73, 1137.67, 1137.73, 1137.7, 1137.69, 1137.71, 1137.7, 1137.67, 1137.67, 1137.7, 1137.7, 1137.71, 1137.7, 1137.72, 1137.67, 1137.73, 1137.68, 1137.69, 1137.7, 1137.67, 1137.67, 1137.73, 1137.67, 1137.7, 1137.71, 1137.73, 1137.7, 1137.71, 1137.73, 1137.7, 1137.73, 1137.68, 1137.73, 1137.7, 1137.68, 1137.71, 1137.72, 1137.72, 1137.7, 1137.73, 1137.7, 1137.69, 1137.7, 1137.7, 1137.7, 1137.7, 1137.73, 1137.68, 1137.72, 1137.72, 1137.72, 1137.7, 1137.68, 1137.72, 1137.71, 1137.73, 1137.68, 1137.72, 1137.68, 1137.68, 1137.72, 1137.67, 1137.7, 1137.7, 1137.69, 1137.7, 1137.71, 1137.69, 1137.7, 1137.7, 1137.71, 1137.73, 1137.72, 1137.73, 1137.73, 1137.68, 1137.71, 1137.72, 1137.67, 1137.72, 1137.71, 1137.68, 1137.69, 1137.73, 1137.68, 1137.67, 1137.69, 1137.7, 1137.71, 1137.69, 1137.72, 1137.67, 1137.69, 1137.7, 1137.72, 1137.7, 1137.71, 1137.7, 1137.7, 1137.7, 1137.7, 1137.72, 1137.72, 1137.7, 1137.69, 1137.72, 1137.68, 1137.67, 1137.7, 1137.7, 1137.68, 1137.7, 1137.7, 1137.7, 1137.68, 1137.7, 1137.7, 1137.69, 1137.67, 1137.71, 1137.67, 1137.68, 1137.67, 1137.68, 1137.73, 1137.68, 1137.68, 1137.7, 1137.71, 1137.73, 1137.73, 1137.69, 1137.69, 1137.73, 1137.71, 1137.73, 1137.69, 1137.69, 1137.69, 1137.68, 1137.7, 1137.7, 1137.67, 1137.67, 1137.71, 1137.72, 1137.69, 1137.73, 1137.68, 1137.69, 1137.68, 1137.72, 1137.7, 1137.73, 1137.68, 1137.7, 1137.69, 1137.69, 1137.68, 1137.72, 1137.71, 1137.7, 1137.68, 1137.7, 1137.7, 1137.73, 1137.73, 1137.71, 1137.7, 1137.7, 1137.7, 1137.67, 1137.73, 1137.71, 1137.68, 1137.71, 1137.73, 1137.68, 1137.72, 1137.72, 1137.67, 1137.7, 1137.71, 1137.73, 1137.7, 1137.71, 1137.67, 1137.69, 1137.68, 1137.67, 1137.68, 1137.7, 1137.68, 1137.71, 1137.72, 1137.72, 1137.67, 1137.68, 1137.72, 1137.73, 1137.67, 1137.67, 1137.72, 1137.7, 1137.7, 1137.7, 1137.71, 1137.69, 1137.72, 1137.67, 1137.7, 1137.73, 1137.69, 1137.69, 1137.7, 1137.72, 1137.7, 1137.7, 1137.69, 1137.7, 1137.69, 1137.71, 1137.71, 1137.69, 1137.69, 1137.67, 1137.69, 1137.7, 1137.67, 1137.68, 1137.72, 1137.68, 1137.72, 1137.7, 1137.69, 1137.67, 1137.72, 1137.71, 1137.68, 1137.67, 1137.72, 1137.73, 1137.7, 1137.72, 1137.69, 1137.72, 1137.67, 1137.72, 1137.72, 1137.7, 1137.72, 1137.7, 1137.67, 1137.7, 1137.7, 1137.67, 1137.7, 1137.67, 1137.69, 1137.7, 1137.68, 1137.68, 1137.7, 1137.7, 1137.7, 1137.7, 1137.71, 1137.72, 1137.7, 1137.67, 1137.68, 1137.69, 1137.71, 1137.7, 1137.73, 1137.68, 1137.7, 1137.71, 1137.7, 1137.67, 1137.72, 1137.68, 1137.73, 1137.7, 1137.68, 1137.7, 1137.7, 1137.72, 1137.68, 1137.67, 1137.67, 1137.68, 1137.68, 1137.69, 1137.71, 1137.73, 1137.67, 1137.73, 1137.68, 1137.67, 1137.72, 1137.68, 1137.71, 1137.7, 1137.73, 1137.67, 1137.67, 1137.7, 1137.73, 1137.69, 1137.7, 1137.68, 1137.7, 1137.72, 1137.7, 1137.72, 1137.71, 1137.69, 1137.73, 1137.69, 1137.7, 1137.73, 1137.69, 1137.67, 1137.67, 1137.68, 1137.73, 1137.73, 1137.71, 1137.69, 1137.72, 1137.67, 1137.67, 1137.67, 1137.72, 1137.73, 1137.69, 1137.71, 1137.7, 1137.7, 1137.7, 1137.69, 1137.71, 1137.7, 1137.7, 1137.68, 1137.68, 1137.67, 1137.67, 1137.7, 1137.7, 1137.72, 1137.67, 1137.7, 1137.71, 1137.7, 1137.7, 1137.73, 1137.72, 1137.68, 1137.69, 1137.68, 1137.73, 1137.67, 1137.71, 1137.7, 1137.69, 1137.73, 1137.7, 1137.7, 1137.68, 1137.72, 1137.71, 1137.73, 1137.67, 1137.7, 1137.7, 1137.7, 1137.7, 1137.73, 1137.71, 1137.73, 1137.7, 1137.67, 1137.71, 1137.7, 1137.69, 1137.73, 1137.7, 1137.69, 1137.7, 1137.69, 1137.72, 1137.67, 1137.67, 1137.67, 1137.71, 1137.7, 1137.68, 1137.7, 1137.72, 1137.7, 1137.7, 1137.7, 1137.7, 1137.73, 1137.73, 1137.7, 1137.67, 1137.73, 1137.67, 1137.73, 1137.69, 1137.7, 1137.72, 1137.67, 1137.7, 1137.73, 1137.69, 1137.73, 1137.67, 1137.67, 1137.73, 1137.73, 1137.72, 1137.72, 1137.7, 1137.72, 1137.7, 1137.7, 1137.7, 1137.72, 1137.69, 1137.7, 1137.72, 1137.69, 1137.68, 1137.7, 1137.69, 1137.69, 1137.7, 1137.68, 1137.67, 1137.7, 1137.7, 1137.7, 1137.67, 1137.69, 1137.67, 1137.72, 1137.73, 1137.69, 1137.69, 1137.7, 1137.73, 1137.68, 1137.71, 1137.73, 1137.67, 1137.68, 1137.73, 1137.68, 1137.68, 1137.69, 1137.69, 1137.67, 1137.69, 1137.73, 1137.72, 1137.69, 1137.69, 1137.73, 1137.67, 1137.67, 1137.68, 1137.71, 1137.72, 1137.7, 1137.71, 1137.68, 1137.68, 1137.7, 1137.7, 1137.73, 1137.67, 1137.69, 1137.67, 1137.72, 1137.72, 1137.7, 1137.68, 1137.7, 1137.69, 1137.7, 1137.73, 1137.7, 1137.71, 1137.68, 1137.67, 1137.71, 1137.67, 1137.67, 1137.7, 1137.69, 1137.71, 1137.68, 1137.7, 1137.73, 1137.7, 1137.7, 1137.72, 1137.71, 1137.67, 1137.68, 1137.7, 1137.72, 1137.71, 1137.7, 1137.7, 1137.69, 1137.68, 1137.73, 1137.71, 1137.67, 1137.71, 1137.73, 1137.7, 1137.69, 1137.7, 1137.7, 1137.73, 1137.73, 1137.69, 1137.69, 1137.67, 1137.72, 1137.67, 1137.73, 1137.7, 1137.7, 1137.69, 1137.7, 1137.73, 1137.7, 1137.7, 1137.68, 1137.67, 1137.68, 1137.7, 1137.73, 1137.69, 1137.69, 1137.71, 1137.71, 1137.71, 1137.73, 1137.69, 1137.68, 1137.71];
    window.noInferenceLatencyData = [852.5699999999999, 852.54, 852.5699999999999, 852.54, 852.52, 852.55, 852.53, 852.52, 852.5699999999999, 852.56, 852.53, 852.55, 852.54, 852.54, 852.52, 852.5699999999999, 852.54, 852.56, 852.53, 852.53, 852.54, 852.55, 852.55, 852.55, 852.54, 852.51, 852.55, 852.52, 852.53, 852.51, 852.56, 852.54, 852.55, 852.55, 852.54, 852.55, 852.53, 852.54, 852.54, 852.54, 852.53, 852.54, 852.54, 852.56, 852.53, 852.55, 852.52, 852.5699999999999, 852.55, 852.52, 852.52, 852.53, 852.5699999999999, 852.51, 852.54, 852.55, 852.54, 852.52, 852.51, 852.55, 852.54, 852.56, 852.53, 852.56, 852.54, 852.5699999999999, 852.54, 852.52, 852.52, 852.54, 852.51, 852.54, 852.52, 852.52, 852.55, 852.56, 852.5699999999999, 852.51, 852.53, 852.52, 852.54, 852.53, 852.53, 852.5699999999999, 852.56, 852.56, 852.56, 852.53, 852.51, 852.5699999999999, 852.54, 852.54, 852.53, 852.52, 852.53, 852.51, 852.53, 852.5699999999999, 852.51, 852.52, 852.51, 852.52, 852.53, 852.5699999999999, 852.52, 852.54, 852.54, 852.55, 852.52, 852.53, 852.52, 852.53, 852.53, 852.56, 852.54, 852.5699999999999, 852.52, 852.52, 852.55, 852.55, 852.54, 852.54, 852.56, 852.51, 852.54, 852.51, 852.56, 852.55, 852.52, 852.54, 852.55, 852.55, 852.51, 852.52, 852.53, 852.56, 852.52, 852.56, 852.56, 852.54, 852.5699999999999, 852.51, 852.51, 852.51, 852.54, 852.51, 852.56, 852.53, 852.55, 852.54, 852.54, 852.52, 852.54, 852.55, 852.54, 852.5699999999999, 852.55, 852.55, 852.5699999999999, 852.56, 852.52, 852.56, 852.51, 852.54, 852.5699999999999, 852.53, 852.55, 852.53, 852.56, 852.54, 852.54, 852.55, 852.55, 852.54, 852.52, 852.53, 852.55, 852.5699999999999, 852.54, 852.54, 852.51, 852.55, 852.54, 852.55, 852.51, 852.51, 852.5699999999999, 852.52, 852.5699999999999, 852.5699999999999, 852.54, 852.54, 852.53, 852.56, 852.5699999999999, 852.55, 852.52, 852.51, 852.55, 852.54, 852.52, 852.5699999999999, 852.55, 852.52, 852.56, 852.54, 852.51, 852.53, 852.54, 852.53, 852.56, 852.5699999999999, 852.52, 852.54, 852.51, 852.56, 852.5699999999999, 852.53, 852.5699999999999, 852.55, 852.51, 852.5699999999999, 852.54, 852.55, 852.52, 852.51, 852.5699999999999, 852.56, 852.5699999999999, 852.52, 852.53, 852.54, 852.51, 852.5699999999999, 852.51, 852.54, 852.51, 852.53, 852.51, 852.54, 852.5699999999999, 852.52, 852.56, 852.5699999999999, 852.53, 852.54, 852.54, 852.52, 852.55, 852.53, 852.55, 852.52, 852.5699999999999, 852.54, 852.55, 852.54, 852.54, 852.51, 852.54, 852.54, 852.51, 852.56, 852.56, 852.5699999999999, 852.54, 852.56, 852.52, 852.53, 852.53, 852.56, 852.51, 852.51, 852.51, 852.54, 852.5699999999999, 852.51, 852.52, 852.51, 852.56, 852.51, 852.51, 852.55, 852.5699999999999, 852.53, 852.54, 852.5699999999999, 852.56, 852.5699999999999, 852.51, 852.54, 852.55, 852.51, 852.54, 852.54, 852.54, 852.5699999999999, 852.55, 852.52, 852.54, 852.53, 852.54, 852.55, 852.5699999999999, 852.54, 852.56, 852.51, 852.52, 852.53, 852.51, 852.5699999999999, 852.5699999999999, 852.5699999999999, 852.53, 852.5699999999999, 852.56, 852.53, 852.52, 852.52, 852.56, 852.51, 852.5699999999999, 852.52, 852.5699999999999, 852.56, 852.54, 852.51, 852.54, 852.54, 852.5699999999999, 852.51, 852.5699999999999, 852.52, 852.54, 852.54, 852.56, 852.51, 852.56, 852.53, 852.51, 852.56, 852.51, 852.55, 852.52, 852.52, 852.51, 852.55, 852.54, 852.5699999999999, 852.55, 852.56, 852.54, 852.55, 852.54, 852.51, 852.55, 852.5699999999999, 852.54, 852.55, 852.52, 852.54, 852.56, 852.54, 852.52, 852.55, 852.51, 852.51, 852.54, 852.56, 852.56, 852.5699999999999, 852.51, 852.52, 852.5699999999999, 852.55, 852.52, 852.52, 852.55, 852.54, 852.56, 852.52, 852.54, 852.52, 852.55, 852.52, 852.54, 852.55, 852.55, 852.5699999999999, 852.54, 852.52, 852.54, 852.56, 852.55, 852.52, 852.56, 852.54, 852.55, 852.55, 852.52, 852.52, 852.56, 852.53, 852.51, 852.55, 852.51, 852.52, 852.54, 852.54, 852.5699999999999, 852.56, 852.55, 852.53, 852.53, 852.56, 852.56, 852.5699999999999, 852.51, 852.56, 852.51, 852.5699999999999, 852.54, 852.55, 852.52, 852.52, 852.51, 852.51, 852.54, 852.54, 852.5699999999999, 852.5699999999999, 852.51, 852.53, 852.53, 852.51, 852.53, 852.51, 852.51, 852.54, 852.5699999999999, 852.5699999999999, 852.51, 852.52, 852.51, 852.54, 852.54, 852.55, 852.56, 852.5699999999999, 852.53, 852.54, 852.54, 852.51, 852.56, 852.56, 852.53, 852.51, 852.54, 852.53, 852.5699999999999, 852.51, 852.53, 852.53, 852.54, 852.56, 852.52, 852.53, 852.5699999999999, 852.55, 852.56, 852.54, 852.54, 852.54, 852.55, 852.54, 852.52, 852.54, 852.5699999999999, 852.56, 852.51, 852.51, 852.53, 852.55, 852.55, 852.54, 852.53, 852.53, 852.56, 852.54, 852.52, 852.53, 852.52, 852.54, 852.5699999999999, 852.54, 852.55, 852.52, 852.56, 852.54, 852.5699999999999, 852.56, 852.55, 852.55, 852.53, 852.54, 852.52, 852.53, 852.54, 852.5699999999999, 852.56, 852.52, 852.53, 852.53, 852.54, 852.52, 852.5699999999999, 852.52, 852.54, 852.53, 852.55, 852.56, 852.54, 852.52, 852.53, 852.54, 852.56, 852.51, 852.52, 852.5699999999999, 852.56, 852.53, 852.54, 852.55, 852.51, 852.54, 852.54, 852.52, 852.56, 852.54, 852.52, 852.54, 852.55, 852.54, 852.53, 852.54, 852.51, 852.51, 852.5699999999999, 852.52, 852.52, 852.5699999999999, 852.55, 852.5699999999999, 852.54, 852.53, 852.52, 852.54, 852.56, 852.54, 852.5699999999999, 852.5699999999999, 852.55, 852.55, 852.52, 852.56, 852.5699999999999, 852.52, 852.5699999999999, 852.54, 852.52, 852.51, 852.51, 852.54, 852.53, 852.5699999999999, 852.55, 852.5699999999999, 852.52, 852.53, 852.53, 852.52, 852.54, 852.56, 852.54, 852.56, 852.52, 852.5699999999999, 852.54, 852.54, 852.55, 852.54, 852.52, 852.54, 852.54, 852.53, 852.5699999999999, 852.55, 852.54, 852.53, 852.52, 852.56, 852.55]
    window.jewelLatencyData = [981.45, 981.47, 981.47, 981.5, 981.47, 981.47, 981.49, 981.5, 981.49, 981.45, 981.47, 981.49, 981.44, 981.44, 981.49, 981.47, 981.44, 981.47, 981.47, 981.46, 981.48, 981.5, 981.47, 981.47, 981.49, 981.47, 981.45, 981.46, 981.48, 981.47, 981.46, 981.46, 981.47, 981.46, 981.45, 981.48, 981.48, 981.48, 981.47, 981.45, 981.48, 981.46, 981.49, 981.44, 981.45, 981.46, 981.46, 981.44, 981.47, 981.45, 981.45, 981.45, 981.47, 981.45, 981.5, 981.5, 981.47, 981.47, 981.5, 981.44, 981.44, 981.47, 981.48, 981.46, 981.5, 981.45, 981.47, 981.5, 981.45, 981.45, 981.47, 981.47, 981.49, 981.47, 981.46, 981.47, 981.46, 981.45, 981.5, 981.5, 981.45, 981.49, 981.45, 981.47, 981.46, 981.45, 981.47, 981.5, 981.49, 981.44, 981.48, 981.48, 981.46, 981.47, 981.48, 981.47, 981.5, 981.45, 981.48, 981.47, 981.49, 981.49, 981.44, 981.48, 981.46, 981.44, 981.48, 981.5, 981.47, 981.45, 981.5, 981.48, 981.49, 981.49, 981.46, 981.46, 981.5, 981.48, 981.48, 981.47, 981.47, 981.49, 981.47, 981.5, 981.45, 981.48, 981.47, 981.5, 981.49, 981.48, 981.46, 981.47, 981.47, 981.47, 981.47, 981.44, 981.46, 981.46, 981.47, 981.44, 981.47, 981.47, 981.47, 981.47, 981.47, 981.44, 981.45, 981.46, 981.44, 981.49, 981.48, 981.5, 981.47, 981.48, 981.49, 981.5, 981.48, 981.47, 981.44, 981.47, 981.46, 981.47, 981.5, 981.44, 981.47, 981.49, 981.46, 981.49, 981.5, 981.45, 981.48, 981.46, 981.46, 981.47, 981.47, 981.5, 981.46, 981.45, 981.49, 981.5, 981.49, 981.47, 981.47, 981.44, 981.49, 981.48, 981.47, 981.44, 981.47, 981.45, 981.5, 981.49, 981.48, 981.45, 981.47, 981.46, 981.5, 981.5, 981.47, 981.48, 981.45, 981.47, 981.44, 981.48, 981.46, 981.47, 981.47, 981.48, 981.45, 981.47, 981.47, 981.47, 981.5, 981.46, 981.48, 981.49, 981.44, 981.46, 981.44, 981.49, 981.44, 981.45, 981.47, 981.44, 981.46, 981.5, 981.5, 981.49, 981.46, 981.5, 981.47, 981.45, 981.44, 981.48, 981.49, 981.5, 981.45, 981.5, 981.45, 981.46, 981.47, 981.44, 981.46, 981.49, 981.47, 981.45, 981.48, 981.47, 981.49, 981.48, 981.48, 981.47, 981.47, 981.44, 981.47, 981.48, 981.46, 981.47, 981.45, 981.46, 981.5, 981.48, 981.47, 981.44, 981.5, 981.44, 981.5, 981.46, 981.5, 981.45, 981.44, 981.46, 981.49, 981.44, 981.47, 981.5, 981.46, 981.45, 981.5, 981.46, 981.47, 981.44, 981.47, 981.44, 981.46, 981.47, 981.48, 981.44, 981.44, 981.47, 981.48, 981.49, 981.45, 981.45, 981.47, 981.49, 981.49, 981.45, 981.48, 981.47, 981.48, 981.5, 981.44, 981.48, 981.49, 981.48, 981.5, 981.46, 981.47, 981.48, 981.48, 981.48, 981.47, 981.45, 981.46, 981.49, 981.46, 981.46, 981.44, 981.5, 981.47, 981.47, 981.46, 981.45, 981.5, 981.47, 981.45, 981.47, 981.49, 981.5, 981.5, 981.5, 981.47, 981.45, 981.49, 981.47, 981.48, 981.5, 981.49, 981.47, 981.49, 981.45, 981.5, 981.46, 981.5, 981.44, 981.45, 981.47, 981.44, 981.47, 981.47, 981.44, 981.48, 981.44, 981.46, 981.45, 981.46, 981.47, 981.46, 981.47, 981.44, 981.44, 981.47, 981.48, 981.49, 981.45, 981.46, 981.48, 981.45, 981.48, 981.48, 981.49, 981.47, 981.47, 981.49, 981.45, 981.49, 981.49, 981.45, 981.46, 981.47, 981.47, 981.48, 981.5, 981.48, 981.47, 981.44, 981.47, 981.47, 981.49, 981.44, 981.49, 981.5, 981.45, 981.48, 981.46, 981.48, 981.47, 981.49, 981.44, 981.49, 981.47, 981.44, 981.49, 981.49, 981.44, 981.45, 981.48, 981.46, 981.47, 981.45, 981.48, 981.47, 981.46, 981.49, 981.45, 981.46, 981.45, 981.45, 981.45, 981.47, 981.45, 981.5, 981.45, 981.49, 981.5, 981.48, 981.47, 981.48, 981.47, 981.47, 981.45, 981.46, 981.47, 981.47, 981.48, 981.5, 981.44, 981.47, 981.45, 981.48, 981.47, 981.48, 981.47, 981.44, 981.47, 981.46, 981.46, 981.5, 981.46, 981.45, 981.49, 981.47, 981.5, 981.45, 981.49, 981.47, 981.46, 981.47, 981.47, 981.47, 981.5, 981.45, 981.5, 981.47, 981.45, 981.46, 981.47, 981.45, 981.48, 981.5, 981.47, 981.48, 981.47, 981.48, 981.46, 981.45, 981.47, 981.46, 981.45, 981.47, 981.44, 981.5, 981.47, 981.45, 981.5, 981.46, 981.46, 981.47, 981.45, 981.49, 981.45, 981.48, 981.47, 981.5, 981.49, 981.49, 981.47, 981.46, 981.47, 981.47, 981.47, 981.47, 981.47, 981.48, 981.45, 981.5, 981.49, 981.48, 981.49, 981.46, 981.45, 981.47, 981.47, 981.49, 981.44, 981.47, 981.48, 981.47, 981.48, 981.47, 981.46, 981.45, 981.47, 981.46, 981.49, 981.47, 981.44, 981.46, 981.44, 981.47, 981.48, 981.49, 981.49, 981.5, 981.5, 981.48, 981.49, 981.48, 981.49, 981.5, 981.45, 981.47, 981.47, 981.49, 981.5, 981.46, 981.49, 981.47, 981.44, 981.47, 981.44, 981.47, 981.5, 981.49, 981.44, 981.48, 981.44, 981.49, 981.45, 981.47, 981.46, 981.48, 981.49, 981.44, 981.47, 981.47, 981.47, 981.44, 981.44, 981.47, 981.45, 981.5, 981.47, 981.45, 981.49, 981.47, 981.44, 981.49, 981.5, 981.47, 981.47, 981.44, 981.5, 981.49, 981.46, 981.48, 981.47, 981.48, 981.49, 981.48, 981.47, 981.49, 981.44, 981.47, 981.47, 981.48, 981.45, 981.46, 981.5, 981.47]
    window.mousikaLatencyData = [871.66, 871.62, 871.62, 871.65, 871.64, 871.65, 871.67, 871.66, 871.67, 871.64, 871.65, 871.61, 871.66, 871.64, 871.61, 871.61, 871.62, 871.62, 871.62, 871.62, 871.63, 871.64, 871.66, 871.65, 871.61, 871.64, 871.65, 871.64, 871.64, 871.62, 871.67, 871.62, 871.64, 871.61, 871.64, 871.66, 871.64, 871.64, 871.61, 871.62, 871.64, 871.63, 871.61, 871.64, 871.63, 871.62, 871.67, 871.65, 871.62, 871.66, 871.65, 871.64, 871.67, 871.66, 871.65, 871.67, 871.65, 871.66, 871.63, 871.61, 871.66, 871.64, 871.61, 871.64, 871.61, 871.61, 871.66, 871.62, 871.67, 871.63, 871.64, 871.67, 871.67, 871.67, 871.67, 871.64, 871.64, 871.62, 871.67, 871.64, 871.64, 871.63, 871.61, 871.64, 871.67, 871.64, 871.63, 871.61, 871.65, 871.62, 871.62, 871.64, 871.63, 871.61, 871.67, 871.66, 871.64, 871.64, 871.61, 871.62, 871.61, 871.66, 871.64, 871.65, 871.64, 871.66, 871.65, 871.62, 871.62, 871.62, 871.63, 871.65, 871.67, 871.64, 871.64, 871.64, 871.65, 871.65, 871.63, 871.67, 871.67, 871.64, 871.64, 871.66, 871.61, 871.61, 871.61, 871.65, 871.67, 871.65, 871.64, 871.62, 871.67, 871.66, 871.62, 871.66, 871.62, 871.66, 871.63, 871.65, 871.64, 871.67, 871.67, 871.67, 871.65, 871.67, 871.62, 871.63, 871.67, 871.62, 871.63, 871.64, 871.65, 871.62, 871.61, 871.65, 871.64, 871.61, 871.64, 871.66, 871.61, 871.66, 871.65, 871.64, 871.67, 871.66, 871.66, 871.61, 871.64, 871.63, 871.63, 871.61, 871.64, 871.64, 871.64, 871.64, 871.64, 871.63, 871.61, 871.62, 871.61, 871.61, 871.65, 871.66, 871.64, 871.66, 871.62, 871.66, 871.66, 871.64, 871.64, 871.61, 871.66, 871.61, 871.67, 871.64, 871.65, 871.64, 871.64, 871.63, 871.61, 871.67, 871.64, 871.64, 871.64, 871.64, 871.63, 871.61, 871.66, 871.66, 871.62, 871.61, 871.64, 871.62, 871.62, 871.61, 871.65, 871.66, 871.67, 871.62, 871.64, 871.62, 871.63, 871.65, 871.66, 871.64, 871.64, 871.65, 871.64, 871.62, 871.67, 871.64, 871.64, 871.62, 871.64, 871.66, 871.64, 871.62, 871.66, 871.64, 871.62, 871.64, 871.61, 871.62, 871.65, 871.67, 871.63, 871.65, 871.64, 871.65, 871.61, 871.62, 871.62, 871.67, 871.61, 871.66, 871.64, 871.63, 871.67, 871.64, 871.61, 871.66, 871.64, 871.64, 871.62, 871.64, 871.61, 871.65, 871.63, 871.63, 871.65, 871.64, 871.63, 871.62, 871.66, 871.61, 871.66, 871.62, 871.61, 871.65, 871.64, 871.66, 871.66, 871.64, 871.66, 871.63, 871.65, 871.62, 871.61, 871.65, 871.67, 871.62, 871.61, 871.61, 871.66, 871.62, 871.65, 871.63, 871.66, 871.67, 871.66, 871.65, 871.67, 871.64, 871.65, 871.67, 871.67, 871.62, 871.64, 871.66, 871.61, 871.66, 871.65, 871.66, 871.66, 871.63, 871.67, 871.61, 871.62, 871.64, 871.62, 871.62, 871.66, 871.61, 871.64, 871.61, 871.64, 871.64, 871.61, 871.61, 871.64, 871.61, 871.63, 871.65, 871.63, 871.67, 871.63, 871.62, 871.63, 871.61, 871.64, 871.66, 871.64, 871.62, 871.64, 871.65, 871.62, 871.61, 871.65, 871.61, 871.65, 871.67, 871.61, 871.66, 871.64, 871.63, 871.63, 871.67, 871.66, 871.66, 871.67, 871.64, 871.67, 871.63, 871.64, 871.67, 871.64, 871.61, 871.61, 871.64, 871.62, 871.64, 871.67, 871.66, 871.63, 871.61, 871.63, 871.65, 871.62, 871.66, 871.61, 871.67, 871.67, 871.61, 871.66, 871.63, 871.67, 871.66, 871.64, 871.66, 871.65, 871.66, 871.66, 871.64, 871.65, 871.67, 871.64, 871.62, 871.66, 871.64, 871.64, 871.64, 871.61, 871.66, 871.61, 871.67, 871.67, 871.61, 871.67, 871.62, 871.64, 871.64, 871.65, 871.64, 871.64, 871.64, 871.64, 871.63, 871.65, 871.62, 871.62, 871.61, 871.63, 871.62, 871.66, 871.61, 871.61, 871.64, 871.66, 871.62, 871.65, 871.64, 871.64, 871.65, 871.62, 871.61, 871.62, 871.61, 871.64, 871.64, 871.64, 871.62, 871.67, 871.66, 871.61, 871.65, 871.62, 871.62, 871.64, 871.66, 871.64, 871.65, 871.64, 871.62, 871.63, 871.64, 871.63, 871.66, 871.64, 871.67, 871.67, 871.66, 871.63, 871.63, 871.64, 871.62, 871.64, 871.61, 871.61, 871.64, 871.63, 871.61, 871.63, 871.64, 871.66, 871.64, 871.61, 871.66, 871.67, 871.63, 871.61, 871.65, 871.64, 871.63, 871.64, 871.64, 871.67, 871.64, 871.64, 871.66, 871.64, 871.64, 871.62, 871.64, 871.64, 871.66, 871.61, 871.67, 871.64, 871.61, 871.63, 871.61, 871.62, 871.64, 871.65, 871.64, 871.66, 871.62, 871.64, 871.64, 871.65, 871.61, 871.64, 871.65, 871.63, 871.64, 871.62, 871.66, 871.61, 871.66, 871.66, 871.61, 871.64, 871.62, 871.65, 871.67, 871.67, 871.65, 871.62, 871.66, 871.63, 871.64, 871.63, 871.63, 871.66, 871.64, 871.65, 871.61, 871.65, 871.62, 871.63, 871.62, 871.67, 871.66, 871.64, 871.67, 871.64, 871.61, 871.64, 871.63, 871.66, 871.66, 871.64, 871.63, 871.67, 871.65, 871.63, 871.64, 871.64, 871.64, 871.64, 871.67, 871.65, 871.61, 871.61, 871.66, 871.64, 871.66, 871.65, 871.66, 871.62, 871.64, 871.64, 871.67, 871.62, 871.61, 871.67, 871.61, 871.63, 871.62, 871.65, 871.67, 871.64, 871.65, 871.62, 871.62, 871.63, 871.66, 871.66, 871.64, 871.63, 871.66, 871.61, 871.67, 871.66, 871.62, 871.62, 871.67, 871.63, 871.66, 871.66]
    window.mousikaPerfData = {
      'weighted_overall': [0.8733772996772278, 0.8624693227624991, 0.8672655603458338, 0.8646780411050662, 0.8670342852459808, 0.8645922499664975, 0.8651261242614843, 0.8629262801376191, 0.8633100421671354, 0.864004895350073, 0.8612562950609318, 0.8585620990652785, 0.8572068282447375, 0.858505268389642, 0.8493404231882181, 0.8504545261312293, 0.8510175938747655, 0.8497576311864399, 0.8492758686596982, 0.8478351218245626, 0.848474566437558, 0.8487492843351897, 0.8487461464150032, 0.8471710171226988, 0.8480090795519927, 0.8480777661057652, 0.8501933819037301, 0.8517185811862756, 0.853105262279809, 0.8558752249454579, 0.8533377027621422, 0.8543061656280913, 0.8513527091764117, 0.8505581417591703, 0.8491991876435457, 0.8470842796179084, 0.8455603642959408, 0.843199233805324, 0.8424342316984326, 0.8417839593856894, 0.8400535033040297, 0.8392613053995784, 0.838130222390851, 0.8382529904415598, 0.8372233920545291, 0.8359106527414664, 0.8348856591662596, 0.8359475700212803, 0.8360899193286333, 0.8272851873940664, 0.8286389849194065, 0.8294701979907223, 0.8307611088830386, 0.8319590875784532, 0.8327468682755769, 0.8351266572974174, 0.8363511742606575, 0.8376611435692914, 0.8390850278512627, 0.8396043404257246], 'micro_overall': [0.8749001181957546, 0.8652618227691069, 0.8697701495349996, 0.8677354646236652, 0.870284472869252, 0.868016699631016, 0.8686619990225899, 0.8665306761764741, 0.8669887929888482, 0.8677124763580812, 0.8649299800514362, 0.8620879918632498, 0.8606847706425137, 0.8621505485087901, 0.8544401816825453, 0.8556292665865195, 0.8561200777250321, 0.8551175594958739, 0.8544419106213954, 0.8530434109924208, 0.853668966601574, 0.8534466528117297, 0.8531185571914208, 0.851036919570449, 0.8515507222713686, 0.8513768061057994, 0.8533391286131834, 0.8546783620914982, 0.8559792061762045, 0.8584733910209245, 0.8557727421957968, 0.8565357618198779, 0.8529845378983698, 0.8518969669529689, 0.8499638343976983, 0.8473361597527096, 0.8453517102075969, 0.8424313800690433, 0.8413886997397898, 0.8402896565606178, 0.8386360715840658, 0.8377543608458139, 0.8361005747696777, 0.8361649548776318, 0.834873746336118, 0.8329715258793393, 0.8315876613424769, 0.8327007568739028, 0.8328243357564519, 0.8255012991103468, 0.8265097775881457, 0.8268572488042233, 0.8279146374687907, 0.828672061451744, 0.8290622907681964, 0.8313734551968729, 0.8322806427126606, 0.8335049597017609, 0.8349646316891751, 0.8356844648580979], 'macro_overall': [0.8066138833247715, 0.7826062369847484, 0.7666580064996585, 0.7533573993376852, 0.7566006124819982, 0.7388100201218484, 0.7377889862503327, 0.7432925050883036, 0.7478143542719133, 0.7512850132758617, 0.7504103496497175, 0.7472551363415975, 0.7461498669901485, 0.7461900031551161, 0.7327803142230104, 0.73240648437775, 0.7355636550870903, 0.7305398435156922, 0.7260965369040017, 0.7217306378111304, 0.721045916787919, 0.7178052153800784, 0.7161517154607061, 0.7099548070781156, 0.7089567654608819, 0.7066849306384194, 0.7071291535244347, 0.7079690945469505, 0.7211007824659582, 0.7125900688450075, 0.7074948877498493, 0.704509348374736, 0.6985649466348859, 0.6968265299136175, 0.6938593319642318, 0.690109399402282, 0.6881535890873222, 0.6861493462172389, 0.6851292173508835, 0.6836303182084332, 0.6812842579957413, 0.6786919997950916, 0.6764821847132906, 0.6749350516114826, 0.6724128923782953, 0.6682562622481677, 0.6644165722754299, 0.6644791228877864, 0.6629856320169599, 0.6568256681635245, 0.6556799725806545, 0.6543041273728961, 0.6534791338026539, 0.6519235491183598, 0.6495869699369617, 0.6469455852348207, 0.6442379304980873, 0.6434165125260208, 0.6428434107797988, 0.6492148251570337], 'weighted_inst': [0.8733772996772278, 0.8515440248380619, 0.8744677021977306, 0.855919526447549, 0.8741608895969869, 0.8480393142900415, 0.8631568453695935, 0.8400417615322185, 0.8629377486891439, 0.8662642582025283, 0.852549914853109, 0.8487550361329808, 0.8353387471461532, 0.8759832864919388, 0.7771015463543104, 0.9216897684978224, 0.8965128439280928, 0.8537143836036419, 0.8609289318911028, 0.8300999803690808, 0.887041091967053, 0.88279770046578, 0.8904761061332358, 0.8469149318266128, 0.8952094459077258, 0.8665719762513739, 0.9050410311316096, 0.8990096155457501, 0.8995024072705866, 0.9184152119557943, 0.8111889693511873, 0.8711452821636354, 0.6805966878091814, 0.7839795829299758, 0.7941072739510198, 0.7709558653742001, 0.737171564913806, 0.6977374638514284, 0.7748560915907691, 0.8210674232560501, 0.8027454434818384, 0.8239415154783685, 0.7989294846745015, 0.8611759395622168, 0.7987830386577529, 0.7972113434187674, 0.8021762305852304, 0.878218843515342, 0.8370597101145821, 0.5049426954126539, 0.8800110078136979, 0.8711324419568801, 0.8907155845589549, 0.8748641620138956, 0.8838290809369304, 0.9337145751031147, 0.9011692232524908, 0.9103809022882219, 0.9074617185579604, 0.8373525433126101], 'micro_inst': [0.8749001181957546, 0.8549244699358773, 0.8765641806949857, 0.8589722558648704, 0.8764973126347169, 0.8506050643513724, 0.8659789654773498, 0.8433890895691624, 0.8650282482530692, 0.8682745371110354, 0.8484426599233394, 0.8429130626623544, 0.8359110044080305, 0.8782688170964177, 0.7919849842082942, 0.9286126555240147, 0.893906083155501, 0.8525888354103007, 0.8435429503538548, 0.8201157748404012, 0.8836076738475381, 0.8744787402795247, 0.8792733322003145, 0.8412167803205549, 0.8903279056880834, 0.8648714547875573, 0.9026288432723996, 0.8988792483339384, 0.8983902038170024, 0.9161252147289268, 0.8102347029070422, 0.873289898702997, 0.7003332872931278, 0.802920880936176, 0.800853447873163, 0.7796619887555735, 0.7475849033066443, 0.7111157048786221, 0.7948691431297482, 0.8305407526262498, 0.8176639813663373, 0.8323250428668091, 0.8087816883435185, 0.8671171716992466, 0.788671615531441, 0.8058828235158111, 0.8174991318365908, 0.8811107197330585, 0.8471964782202103, 0.5565308458065843, 0.8809900049529499, 0.8706298469970623, 0.8861892612969815, 0.8724596046079922, 0.881307329730699, 0.9326977871249414, 0.90000194480366, 0.9088565995018947, 0.9100838314444155, 0.8386494421837127], 'macro_inst': [0.8066138833247715, 0.7977273973650851, 0.8103621058591491, 0.8090057000835194, 0.8343402206789277, 0.7511294008584684, 0.817699130878243, 0.7783249989014768, 0.8379968578469782, 0.8689729158578537, 0.7558190134507032, 0.752746144219092, 0.8088354045880564, 0.8397004706210383, 0.7155873074994632, 0.8456310239400087, 0.7983463606950791, 0.7351529822572547, 0.7051603856921211, 0.7069655175047208, 0.7557312493634349, 0.7573046112118179, 0.7784246412700833, 0.700716605854237, 0.8047103341101859, 0.8086712944995529, 0.8207678363273727, 0.8105634715971087, 0.8460117525597245, 0.8071632305823384, 0.7245613769083382, 0.7827752744097752, 0.8603947659306675, 0.8777568316795268, 0.830277267902862, 0.7440920236904743, 0.8140602434913087, 0.7782007700015001, 0.8761155990254961, 0.7825169671630902, 0.7387943044061389, 0.7310011447293561, 0.7563494916739126, 0.7843708547169677, 0.6513002561380807, 0.719851312800924, 0.6973179204847584, 0.7656469526972735, 0.7289673087176012, 0.6532304512420513, 0.7858853316210254, 0.7818958782380252, 0.7609667847227084, 0.7402410062883908, 0.7262918009540453, 0.7904187209261903, 0.7494086751808839, 0.754716435754697, 0.8288336681693113, 0.7705219301684691]
    }
    window.dunePerfData = {
      'weighted_overall': [0.7201864063861249, 0.6711825699970677, 0.7286628149663843, 0.6864673282204056, 0.6737315739494084, 0.7393206139135612, 0.7788323319408512, 0.798132308065558, 0.7999300686370703, 0.8019467156961942, 0.8019467156961899, 0.8019467156961899, 0.8019467156961899, 0.8019467156961897, 0.8019467156961899, 0.8019467156961902, 0.8021801271490568, 0.8022695865716805, 0.8054139335141365, 0.8056797298718614, 0.8065249921239621, 0.8065870226680356, 0.8074163416481893, 0.8087314610433799, 0.8091740017043656, 0.8096083116056686, 0.8096247093226752, 0.8098989799777512, 0.8102328859458443, 0.8102328859459005, 0.8107075896117895, 0.8112402196522782, 0.8112386650835978, 0.8112386650835978, 0.8112386650835977, 0.8112386650835974, 0.8112386650835978, 0.8112386650835981, 0.8112428478963256, 0.8112428478963319, 0.811253149217122, 0.8112716371463269, 0.8115447017410391, 0.8119767592272703, 0.8123563622334892, 0.8131695207952829, 0.814441780979612, 0.8156154342636234, 0.8165793484692605, 0.8181632643417664, 0.8198756813746438, 0.8215961203433858, 0.8228827743577288, 0.8241161462505131, 0.824490585158813, 0.824719619499445, 0.8263456220823453, 0.8274808852646331, 0.8280658772223602, 0.8298882616987221], 'micro_overall': [0.7427578984895037, 0.7018034633265721, 0.7391566494114638, 0.7013919933826235, 0.7004149384333412, 0.7594584127091798, 0.7909011948123816, 0.8089578917346218, 0.8104728921878755, 0.81229820549106, 0.8122982054910564, 0.8122982054910564, 0.8122982054910564, 0.8122982054910561, 0.8122982054910564, 0.8122982054910564, 0.8124983701404338, 0.8125712224843521, 0.8153249981553022, 0.8155996186959531, 0.8163980221784037, 0.8164566797369962, 0.8172520216547062, 0.8183393207561288, 0.8187595756985871, 0.8191651667750812, 0.8191839635372221, 0.8194705659974647, 0.8198133915629255, 0.8198133915629794, 0.8202838389623531, 0.820865726442474, 0.8208643247108632, 0.8208643247108632, 0.820864324710863, 0.8208643247108629, 0.8208643247108631, 0.8208643247108633, 0.8208674941875949, 0.8208674941876011, 0.8208776949834151, 0.8208962577272036, 0.8211787697640938, 0.82167675339417, 0.8220741012710533, 0.8228733499677089, 0.8241801361996425, 0.8254705528811958, 0.8264922548751239, 0.8281273312654998, 0.8297983243458348, 0.8315439643929182, 0.8328478044614624, 0.8341346216135812, 0.834533679423224, 0.8348979791262197, 0.8365532740050803, 0.8376865051770624, 0.8382755655353422, 0.8397155284094695], 'macro_overall': [0.5311219913944224, 0.5151341421040533, 0.6337286118922862, 0.5958234708730099, 0.5559321708128347, 0.558461482835341, 0.6338358645333754, 0.6469589687106123, 0.653922909215425, 0.6618590687497913, 0.6618590687497826, 0.661859068749782, 0.6618590687498082, 0.6618590687497364, 0.6618590687497946, 0.6618590687498812, 0.662999112875741, 0.6634512706496222, 0.6725959524546662, 0.6727459550022478, 0.6732859742734805, 0.6733265657194436, 0.6757552244165503, 0.6834649645729511, 0.6837639206588265, 0.6840762114128428, 0.6840859984050266, 0.6843200268481336, 0.6845370332153778, 0.6845370332153863, 0.685163337950128, 0.6874900186205671, 0.6874839774677438, 0.6874839774677621, 0.687483977467688, 0.6874839774676708, 0.6874839774677864, 0.6874839774679039, 0.6874818488361482, 0.6874818488361489, 0.6874879765334833, 0.6876066767123868, 0.687869969723384, 0.6882469210309781, 0.6893059601135215, 0.6921338084230841, 0.6930673140696304, 0.6931068612017168, 0.693515890666092, 0.6951714807938593, 0.6963383885080674, 0.6974823890671894, 0.6980476271090414, 0.698485356133497, 0.6986696305750253, 0.6984929665178975, 0.6975539824636204, 0.6960060013104261, 0.6964115438327863, 0.7002386052906937], 'weighted_inst': [0.7201864063861249, 0.6185727271323564, 0.6995347773444046, 0.0023037092848086395, 0.659383536971086, 0.8060867022888236, 0.8600612458589462, 0.9267837725889121, 0.9263985120745777, 0.8794693725023144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9130427689058755, 0.7908996286045403, 0.9175387491930864, 0.9267898270339451, 0.9022440552358864, 0.7793573004532571, 0.9387478429891195, 0.9156346838440267, 0.9251187011960138, 0.9161314199045133, 0.8409090909089445, 0.8392144265457102, 0.7535828220113363, 1.0, 0.7761665724786625, 0.8002081504718199, 0.6105769230769337, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7500000000000234, 1.0, 0.7342592592592512, 0.9677419354838683, 0.770889862380732, 0.7940805399989974, 0.7891700460036596, 0.7858047161326727, 0.806542169706791, 0.8642439434735693, 0.8772770174726526, 0.9145195602344586, 0.9522071857020615, 0.9069762278904849, 0.9143097518316895, 0.8945411423839248, 0.9229366981902651, 0.8230669455099079, 0.8949792513190213, 0.9328246121823658, 0.9204266456935217, 0.9218139908487993], 'micro_inst': [0.7427578984895037, 0.6536045205391782, 0.7040799937784759, 0.00437867144440152, 0.6993371055909187, 0.8343260810500136, 0.8688889457392105, 0.9362770562770598, 0.9276190476190433, 0.880964866282113, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9295774647887389, 0.8440366972477019, 0.9222290263319066, 0.9274611398963344, 0.9045383411580579, 0.790123456790136, 0.9418238993711606, 0.916110581506197, 0.9284750337381801, 0.9165402124431375, 0.8571428571427329, 0.8541666666666737, 0.8009153318077538, 1.0, 0.8233532934131564, 0.8367029548988915, 0.682926829268303, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8571428571428724, 1.0, 0.7999999999999927, 0.9836065573770478, 0.8063829787234015, 0.8260869565217259, 0.8287841191066951, 0.8372093023255733, 0.8245203556387762, 0.8794709948903241, 0.8973808501502806, 0.9288208434058591, 0.954140127388534, 0.9238552997723067, 0.9265238879736467, 0.9121909633418587, 0.9356321839080599, 0.8590717299578057, 0.9074421513446037, 0.9376218323586788, 0.9233152594887718, 0.9382845188284519], 'macro_inst': [0.5311219913944224, 0.5756706187309294, 0.5932617062662614, 0.05482446110901328, 0.550423390969072, 0.5432830212083692, 0.7341699721298859, 0.7008717100581815, 0.8749490014723647, 0.846007167694138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7470995536127866, 0.5690139490139432, 0.7897290589979348, 0.794383611725875, 0.8198631478987801, 0.7465673276684008, 0.7897729560963934, 0.9119319595926688, 0.85047639251062, 0.8315989139899419, 0.863636363636263, 0.7285020800203356, 0.6135701515597661, 1.0, 0.823031991339411, 0.6845326181820516, 0.653125000000003, 1.0, 1.0, 1.0, 1.0, 1.0, 0.75, 1.0, 0.7958333333333334, 0.8888888888888888, 0.6895854059715718, 0.6213969924655843, 0.6820745933827723, 0.7311311398721718, 0.6817386709166288, 0.5851239555177963, 0.6836558827592848, 0.705558437035756, 0.7928067628033125, 0.759991980716334, 0.7223361482244576, 0.7941673843634102, 0.7821492233256934, 0.6441081673131259, 0.6862027373749735, 0.7332485470156525, 0.7678285976195034, 0.7160391690732069]
    }
    window.jewelPerfData = {
      'weighted_overall': [0.7237762466685904, 0.7486241394484667, 0.7459874917916107, 0.7485196038821874, 0.7239964174062764, 0.732835710686705, 0.741505796294467, 0.7577469768590293, 0.7601352928852375, 0.7601522333416946, 0.760152233341695, 0.7601522333416852, 0.7601522333416854, 0.7601522333416852, 0.7601522333416852, 0.7601522333416851, 0.7601522333416855, 0.7601630117006866, 0.7601630117006866, 0.7601630117006865, 0.7601630117006863, 0.7601630117006867, 0.7601630117006863, 0.7601630117006865, 0.7601630117006875, 0.7602253683644516, 0.7602458040881888, 0.7626006241933929, 0.7648229429280411, 0.7681204952557004, 0.771294039357383, 0.7733141742199665, 0.774321670492853, 0.7743432988252162, 0.7747978196552765, 0.7748144586087201, 0.775071406031155, 0.7763489720359633, 0.7768155993231219, 0.7768155993231106, 0.7776885342987353, 0.7794536584637941, 0.7818537226989671, 0.7821735021026729, 0.782198439971701, 0.7822478019510734, 0.7822988450774856, 0.7826228529490149, 0.7844038592611965, 0.7851006604335572, 0.7884274276943892, 0.7906992835376416, 0.7919057231934981, 0.7921450173549037, 0.792723673232918, 0.793054859263301, 0.7939309647205959, 0.7945547990913779, 0.7974102894607108, 0.7977564652629516], 'micro_overall': [0.7249986509894996, 0.7417378089210572, 0.7329279949147312, 0.7331819676856893, 0.7235672735320404, 0.7367765416544417, 0.7429272931274207, 0.7552967260998701, 0.7573721676176247, 0.7573881288745682, 0.7573881288745583, 0.7573881288745503, 0.7573881288745504, 0.7573881288745516, 0.7573881288745548, 0.7573881288745512, 0.7573881288745561, 0.7573990292451692, 0.7573990292451703, 0.7573990292451684, 0.7573990292451666, 0.7573990292451681, 0.757399029245166, 0.7573990292451661, 0.7573990292451714, 0.7574459534425387, 0.7574642504932212, 0.7595282897945529, 0.7615098004240209, 0.7644786171345692, 0.7674241351844813, 0.7693357062813442, 0.7701704590634753, 0.7701922598046947, 0.7706060650973362, 0.7706226315793824, 0.7708734756640131, 0.7719686677368781, 0.7724020361732896, 0.7724020361732782, 0.7731878355041184, 0.7745096849687546, 0.7767291916927188, 0.777060175020836, 0.7770860005143253, 0.7771392255757261, 0.7771929304795068, 0.7775099746984171, 0.7792386348897888, 0.7799336458845616, 0.7828613906703535, 0.7850881901780302, 0.78632535741988, 0.7865639461191052, 0.7870653758902556, 0.7873085724998526, 0.7879811655541674, 0.7885811043435873, 0.7909850869747119, 0.7913151117182325], 'macro_overall': [0.6775191398418214, 0.6634864568442383, 0.6026979456864374, 0.6003562045654083, 0.5808508670656701, 0.564349758538408, 0.5879504114913564, 0.6093600810543994, 0.6138055208428285, 0.6138246007660576, 0.6138246007660451, 0.6138246007660358, 0.6138246007660301, 0.6138246007660316, 0.6138246007661039, 0.6138246007660536, 0.6138246007660741, 0.6138288095773466, 0.6138288095773535, 0.6138288095773531, 0.6138288095773328, 0.6138288095773095, 0.6138288095773285, 0.6138288095773161, 0.6138288095773315, 0.6141938109188877, 0.6142068302952609, 0.6174248349519601, 0.620859339962189, 0.6237280353646567, 0.6264169918798556, 0.6279283096693876, 0.6283952204963563, 0.628403984051131, 0.628828267100315, 0.6288430698562452, 0.6290664084368467, 0.6303841599632029, 0.6300361793545892, 0.6300361793545881, 0.6304078924557929, 0.6365234592194359, 0.6421481481967155, 0.6423617093969997, 0.6423762890476271, 0.642401063437613, 0.6424296900063388, 0.642589009889175, 0.6456938766687861, 0.6459111984664849, 0.6494544707502606, 0.6508707197401646, 0.6516350111307068, 0.651815312789061, 0.652171644559615, 0.6526386236709733, 0.6535344635255367, 0.6540548046567758, 0.6568704100446401, 0.6571809468566253], 'weighted_inst': [0.7237762466685904, 0.7657127457025324, 0.7687436816535484, 0.7598685205274402, 0.7131049364959258, 0.7506686845820338, 0.8080015059626278, 0.8781954088995352, 0.9570465808727134, 0.9512976860537817, 0.9285714285714245, 0.8571428571428655, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8888888888888935, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6666666666666409, 0.9572649572649591, 0.9458333333333266, 0.9349820806617725, 0.9657832818265513, 0.9588878589507271, 0.9542156186456955, 0.9546776234350799, 0.9329918322644865, 0.9573268921095004, 0.9471293069057, 0.9116707242848406, 0.9387295988187736, 0.8861417841706647, 0.9256682981534063, 1.0, 0.8824305655640897, 0.891018638314632, 0.9019707567194967, 0.9129563340919199, 0.908730158730162, 0.9656624871085068, 0.9476896251089773, 0.9545488903682392, 0.9509310019942022, 0.8330784710331276, 0.8309134175850273, 0.9282816234011623, 0.9366061191885809, 0.9056885922064958, 0.9103819814325899, 0.9155264002467624, 0.8837284769247477, 0.9101238805683459, 0.9005774443070209, 0.9160645244371436], 'micro_inst': [0.7249986509894996, 0.7527657142046711, 0.7739941333055483, 0.7356089399312402, 0.7194083606084505, 0.7555574126692295, 0.7974951914670396, 0.8742252778453785, 0.9567744278968304, 0.9499999999999981, 0.9629629629629608, 0.9230769230769279, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9411764705882378, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7999999999999815, 0.9638554216867496, 0.9499999999999946, 0.9419002050580997, 0.968131499496812, 0.9596412556053814, 0.9599828803766338, 0.9556466641818775, 0.9271758436944918, 0.9586776859504128, 0.9359605911329807, 0.9137931034482716, 0.9362637362637134, 0.8901818181817164, 0.9326923076923085, 1.0, 0.9009135628954148, 0.8813559322034116, 0.8956982911019447, 0.9062937062936409, 0.9090909090909125, 0.9645390070921998, 0.9491525423728788, 0.9511228533685608, 0.9485094850948478, 0.851851851851857, 0.8464894882982775, 0.9318303811057435, 0.9383070301291261, 0.9157509157509028, 0.9210697977821242, 0.9193154034229615, 0.8933933933933974, 0.9252259654889038, 0.9084563758389338, 0.916820702402948], 'macro_inst': [0.6775191398418214, 0.6647664955855161, 0.6868153816287027, 0.6497354262141567, 0.5786373413014022, 0.5786698622331651, 0.6772311216101974, 0.7855168740723049, 0.8415298497584744, 0.9405270655270681, 0.8571428571428571, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8333333333333334, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.6666666666666666, 0.9428007889546355, 0.935897435897436, 0.8288989918664951, 0.8683344342968882, 0.754440718489995, 0.8930351223698172, 0.9179619476344141, 0.8520291983800973, 0.9746376811594193, 0.8964913350421537, 0.899764150943394, 0.9351582455858802, 0.8813490135659425, 0.8787031284630515, 1.0, 0.823191328992895, 0.8486706944227845, 0.8957660329143733, 0.9281299041934222, 0.9523809523809532, 0.9604019819945574, 0.9797297297297288, 0.9293127120193216, 0.9406218447773166, 0.7832399759106304, 0.8541599910918387, 0.7994265514436238, 0.9042632420729909, 0.7915016496476888, 0.8628274264025152, 0.9180024018273906, 0.8048173996981566, 0.8699246593534528, 0.8755770573395449, 0.9009593756625324]

    }
    //
    window.currentPath = null,
    window.noInferenceIndex = 0; // Tracks where we left off
    window.mousikaIndex = 0; // Tracks where we left off
    window.jewelIndex = 0; // Tracks where we left off
    window.duneIndex = 0; // Tracks where we left off
  }

  document.getElementById('toggleNoInference').addEventListener('click', () => {
    toggleChartUpdate('noInference');
  });

  document.getElementById('toggleJewel').addEventListener('click', () => {
    toggleChartUpdate('jewel');
  });

  document.getElementById('toggleDune').addEventListener('click', () => {
    toggleChartUpdate('dune');
  });
  
  document.getElementById('toggleMousika').addEventListener('click', () => {
    toggleChartUpdate('mousika');
  });

  function toggleChartUpdate(updaterName) {
    // If the same button is clicked again → STOP it
    if (window.currentUpdater === updaterName) {
      showAnimation('');
      stopChartUpdate();
      return;
    }
    // If something else is running → stop it first
    stopChartUpdate();
    // Start new interval for the selected chart
    window.currentUpdater = updaterName;
    console.log(window.currentUpdater, window.intervalId)
    if (updaterName === 'noInference') {
      window.currentPath = 'assets/data/no_inference_animation.html';
      const toggleNoInfBtn = document.getElementById('toggleNoInference');
      toggleNoInfBtn.textContent = 'NO INFERENCE';
      toggleNoInfBtn.classList.add('active-button');
      toggleNoInfBtn.classList.remove('default-button');
      showAnimation(window.currentPath);
      window.intervalId = setInterval(() => {
        // Stop if we reached end of data
        // if (window.noInferenceIndex >= window.noInferenceLatencyData.length) {
          if (window.noInferenceIndex >= 60) {
          showAnimation('');
          stopChartUpdate();
          return;
        }
        const lat_noInf = window.noInferenceLatencyData[window.noInferenceIndex];
        window.noInferenceIndex++; // advance index

        chartnoInference.updateOptions({
          series: [{ data: [lat_noInf.toFixed(3)] }],
          subtitle: { text: lat_noInf.toFixed(3) }
        });

      }, 1000);
    }
    if (updaterName === 'jewel') {
      window.currentPath = 'assets/data/jewel_animation.html'
      const toggleJewelBtn = document.getElementById('toggleJewel');
      toggleJewelBtn.classList.add('active-button');
      toggleJewelBtn.classList.remove('default-button');
      showAnimation(window.currentPath);
      window.intervalId = setInterval(() => {
        const now = new Date();
        // Stop if we reached end of data
        console.log(window.jewelPerfData['macro_overall'].length)
        if (window.jewelIndex >= window.jewelPerfData['macro_overall'].length) {
          window.jewelIndex = 0;
          showAnimation('');
          stopChartUpdate();
          return;
        }
        const lat_jew = window.jewelLatencyData[window.jewelIndex];
        const macro_jew = window.jewelPerfData['macro_overall'][window.jewelIndex];
        const macro_inst_jew = window.jewelPerfData['macro_inst'][window.jewelIndex];
        const weighted_jew = window.jewelPerfData['weighted_overall'][window.jewelIndex];
        const micro_jew = window.jewelPerfData['micro_overall'][window.jewelIndex];
        window.jewelIndex++; // advance index
        chartLine.appendData([
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: parseFloat(macro_inst_jew.toFixed(3)) }]
          },
          {
            data: [{ x: now.getTime(), y: parseFloat(macro_jew.toFixed(3)) }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          }
        ]);

        chartJewel.updateOptions({
          series: [{ data: [lat_jew.toFixed(3)]}],
          subtitle: { text: lat_jew.toFixed(3)}
        });

        chartCombinedPerf.updateSeries([
          {
            name: 'Macro F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[0].data, 2, macro_jew.toFixed(3))
          },
          {
            name: 'Weighted F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[1].data, 2, weighted_jew.toFixed(3))
          },
          {
            name: 'Micro F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[2].data, 2, micro_jew.toFixed(3))
          }
        ]);

      }, 1000);
    }
    if (updaterName === 'dune') {
      window.currentPath = 'assets/data/dune_animation.html'
      const toggleDuneBtn = document.getElementById('toggleDune');
      toggleDuneBtn.textContent = 'DUNE';
      toggleDuneBtn.classList.add('active-button');
      toggleDuneBtn.classList.remove('default-button');
      showAnimation(window.currentPath);
      window.intervalId = setInterval(() => {
      const now = new Date();
        // Stop if we reached end of data
        if (window.duneIndex >= window.dunePerfData['macro_overall'].length) {
          window.duneIndex = 0;
          showAnimation('');
          stopChartUpdate();
          return;
        }
        const lat_dune = window.duneLatencyData[window.duneIndex];
        const macro_dune = window.dunePerfData['macro_overall'][window.duneIndex];
        const macro_inst_dune = window.dunePerfData['macro_inst'][window.duneIndex];
        const weighted_dune = window.dunePerfData['weighted_overall'][window.duneIndex];
        const micro_dune = window.dunePerfData['micro_overall'][window.duneIndex];
        window.duneIndex++; // advance index
        chartLine.appendData([
          {
            data: [{ x: now.getTime(), y: parseFloat(macro_inst_dune.toFixed(3)) }]
          },
          {
            data: [{ x: now.getTime(), y: parseFloat(macro_dune.toFixed(3)) }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          }
        ]);

        chartDune.updateOptions({
          series: [{ data: [lat_dune.toFixed(3)] }],
          subtitle: { text: lat_dune.toFixed(3) }
        });

        chartCombinedPerf.updateSeries([
          {
            name: 'Macro F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[0].data, 3, macro_dune.toFixed(3))
          },
          {
            name: 'Weighted F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[1].data, 3, weighted_dune.toFixed(3))
          },
          {
            name: 'Micro F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[2].data, 3, micro_dune.toFixed(3))
          }
        ]);
      }, 1000);
    }
    if (updaterName === 'mousika') {
      window.currentPath = 'assets/data/mousika_animation.html'
      const toggleMousikaBtn = document.getElementById('toggleMousika');
      toggleMousikaBtn.textContent = 'MOUSIKA';
      toggleMousikaBtn.classList.add('active-button');
      toggleMousikaBtn.classList.remove('default-button');
      showAnimation(window.currentPath);
      window.intervalId = setInterval(() => {
        const now = new Date();
        // Stop if we reached end of data
        if (window.mousikaIndex >= window.mousikaPerfData['macro_overall'].length) {
          window.mousikaIndex = 0
          showAnimation('');
          stopChartUpdate();
          return;
        }
        const lat_mous = window.mousikaLatencyData[window.mousikaIndex];
        const macro_mous = window.mousikaPerfData['macro_overall'][window.mousikaIndex];
        const macro_inst_mous = window.mousikaPerfData['macro_inst'][window.mousikaIndex];
        const weighted_mous = window.mousikaPerfData['weighted_overall'][window.mousikaIndex];
        const micro_mous = window.mousikaPerfData['micro_overall'][window.mousikaIndex];
        window.mousikaIndex++; // advance index

        chartLine.appendData([
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: null }]
          },
          {
            data: [{ x: now.getTime(), y: parseFloat(macro_inst_mous.toFixed(3))}]
          },
          {
            data: [{ x: now.getTime(), y: parseFloat(macro_mous.toFixed(3))}]
          }
        ]);

        chartMousika.updateOptions({
          series: [{ data: [lat_mous] }],
          subtitle: { text: lat_mous }
        });

        chartCombinedPerf.updateSeries([
          {
            name: 'Macro F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[0].data, 1, macro_mous.toFixed(3))
          },
          {
            name: 'Weighted F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[1].data, 1, weighted_mous.toFixed(3))
          },
          {
            name: 'Micro F1',
            data: updateValueAtIndex(chartCombinedPerf.w.config.series[2].data, 1, micro_mous.toFixed(3))
          }
        ]);
      }, 1000);
    }
    console.log(window.currentUpdater, window.intervalId)
  }

  function stopChartUpdate() {
    clearInterval(window.intervalId);
    window.intervalId = null;
  
    // Reset button labels
    const toggleNoInfBtn = document.getElementById('toggleNoInference');
    toggleNoInfBtn.classList.remove('active-button');
    toggleNoInfBtn.classList.add('default-button');
    // document.getElementById('toggleMousika').textContent = 'MOUSIKA';
    const toggleMousikaBtn = document.getElementById('toggleMousika');
    toggleMousikaBtn.classList.remove('active-button');
    toggleMousikaBtn.classList.add('default-button');
    // 
    const toggleJewelBtn = document.getElementById('toggleJewel');
    toggleJewelBtn.classList.remove('active-button');
    toggleJewelBtn.classList.add('default-button');
    // document.getElementById('toggleDune').textContent = 'DUNE';
    const toggleDuneBtn = document.getElementById('toggleDune');
    toggleDuneBtn.classList.remove('active-button');
    toggleDuneBtn.classList.add('default-button');
  
    window.currentUpdater = null;
  }

  function showAnimation(htmlFile) {
    const frame = document.getElementById('animation-frame');
    frame.src = htmlFile;
    frame.parentElement.style.display = 'block'; // ensures it's visible
  }

  function updateValueAtIndex(arr, index, value) {
    const newArr = [...arr];
    newArr[index] = parseFloat(value);
    return newArr;
  }

}, 1000);
